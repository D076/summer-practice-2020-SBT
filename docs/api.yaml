openapi: 3.0.2
info:
  title: "Swagger Auth, validate and user permission"
  version: 1.0.8
paths:
  /auth:
    post:
      tags: 
        - "Auth and Valid"
      summary: "Authentication"
      description: "Create token and get it"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                login:
                  type: "string"
                password:
                  type: "string"
            example:
              login: "a1pha1337@gmail.com"
              password: "rhokef3"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example: "f57ebe597a3741b688269209fa29b053"
        400:
          description: "Missed required arguments"
        401:
          description: "Login or password is incorrect"
          content: {}

  /validate/{token}:
    get:
      tags:
        - "Auth and Valid"
      summary: "Validation"
      description: "Send token and check it"
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Non-existing token"

  /logout/{token}:
    get:
      tags:
        - "Auth and Valid"
      summary: "Logout"
      description: "Send token and logout"
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Non-existing token"

  /user:
    post:
      tags:
        - "User Info"
      summary: "Register user"
      description: "Register user and get session token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                login:
                  type: "string"
                password:
                  type: "string"
                name:
                  type: "string"
            example:
              login: "a1pha1337@gmail.com"
              password: "rhokef3"
              name: "a1pha1337"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example: "f57ebe597a3741b688269209fa29b053"
        400:
          description: "Missed required arguments"
          content: {}
        409:
          description: "Login already exists"

  /user/delete/{token}:
    delete:
      tags:
        - "User Info"
      summary: "Delete user himself"
      description: ""
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Non-existing token"

  /user/info/{token}:
    get:
      tags:
      - "User Info"
      summary: "Get user info by token"
      description: ""
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user_id:
                    type: "integer"
                    format: "int64"
                  login:
                    type: "string"
                  name:
                    type: "string"
              example:
                user_id: 0
                login: "alpha13371@mail.ru"
                name: "Solo_228"
        404:
          description: "Non-existing token"

  /user/info/public/{login}:
    get:
      tags:
      - "User Info"
      summary: "Get user info by login"
      description: ""
      parameters:
      - name: "login"
        in: "path"
        description: "User login"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user_id:
                    type: "integer"
                    format: "int64"
                  login:
                    type: "string"
                  name:
                    type: "string"
              example:
                user_id: 0
                login: "alpha13371@mail.ru"
                name: "Solo_228"
        404:
          description: "Non-existing login"

  /user/info:
    put:
      tags:
      - "User Info"
      summary: "Edit user info (himself)"
      description: "Leave the fields that do not need to be changed blank"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                info:
                  type: "object"
                  properties:
                    password:
                      type: "string"
                    new_password:
                      type: "string"
                    name:
                      type: "string"
            example:
              token: "f57ebe597a3741b688269209fa29b053"
              info:
                password: "rhokef3"
                new_password: "qwerty0987"
                name: "Solo_322"
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        401:
          description: "Password is incorrect"
        404:
          description: "Non-existing token"

  /permissions/userRole/{user_id}:
    get:
      tags:
        - "Permissions"
      summary: "Gets user role"
      description: "Gets user role by user ID"
      parameters:
      - name: "user_id"
        in: path
        description: "User ID"
        required: true
        schema:
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    collection_id:
                      type: "integer"
                      format: "int64"
                    role_id:
                      type: "integer"
                      format: "int64"
              example:
                - collection_id: 228
                  role_id: 40
                - collection_id: 322
                  role_id: 30
        404:
          description: "Non-existing user ID"

  /permissions/userRole:
    post:
      tags:
        - "Permissions"
      summary: "Set user permissions"
      description: "Edit user role by user ID and token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
                  format: "int64"
                user_id:
                  type: "integer"
                  format: "int64"
                role_id:
                  type: "integer"
                  format: "int64"
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        404:
          description: "Non-existing token, Non-existing user ID, User already has role in collection"
        409:
          description: "User already has role in collection"

  /permissions/editUserRole:
    put:
      tags:
        - "Permissions"
      summary: "Edit user permissions"
      description: "Edit user role by user ID and token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
                  format: "int64"
                user_id:
                  type: "integer"
                  format: "int64"
                role_id:
                  type: "integer"
                  format: "int64"
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        403:
          description: "Not have enough permissions"
        404:
          description: "Non-existing token, Unknown role, User doesn't belong to this collection"

  /permissions/role/{role_id}:
    get:
      tags:
        - "Permissions"
      summary: "Get permissions by role ID"
      description: ""
      parameters:
      - name: "role_id"
        in: "path"
        description: ""
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
                  description: "String array contains permissions"
              example:
                - "read"
                - "rate"
                - "write"
                - "delete_post"
                - "edit_other_users_permissions"
                - "delete_collection"
        404:
          description: "Unknown role"

  /permissions/setPostOwner:
    post:
      tags:
        - "Permissions"
      summary: "Set post owner by User ID and Post ID"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                user_id:
                  type: "integer"
                  description: "ID пользователя"
                post_id:
                  type: "integer"
                  description: "ID поcта"
            example:
              user_id: 42
              post_id: 3
      responses:
        200:
          description: "OK"
        404:
          description: "Incorrect user_id"
        409:
          description: "Current post already has owner"
  
  /permissions/deletePostOwner:
    post:
      tags:
        - "Permissions"
      summary: "Delete post owner by User ID and Post ID"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                  description: "Токен"
                post_id:
                  type: "integer"
                  description: "ID поcта"
            example:
              token: "3frf34d3g23dsds432dsf987"
              post_id: 3
      responses:
        200:
          description: "OK"
        404:
          description: "Incorrect token/post_id"
  
  /permissions/getPostOwner/{post_id}:
    get:
      tags:
        - "Permissions"
      summary: "Get post owner (User ID) by Post ID"
      description: ""
      parameters:
      - name: "post_id"
        in: "path"
        description: ""
        schema:
          type: "integer"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "integer"
              example: "4"
        404:
          description: "Non-existing post"
          
  /permissions/userRole/setCollectionOwner:
    post:
      tags:
        - "Permissions"
      summary: "Set collection owner"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
            example:
              token: "3fd43fre324543dsf4353dsf"
              collection_id: 3
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        404:
          description: "Non-existing token"
        409:
          description: "Collection already public"
  
  /permissions/setPublicCollection:
    post:
      tags:
        - "Permissions"
      summary: "Set public collection by collection ID"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
            example:
              token: "3fd43fre324543dsf4353dsf"
              collection_id: 3
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        403:
          description: "Not have enough permissions"
        404:
          description: "Non-existing token"
        409:
          description: "Collection already public"
          
  /permissions/removePublicCollection:
    post:
      tags:
        - "Permissions"
      summary: "Remove public collection by collection ID"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
            example:
              token: "3fd43fre324543dsf4353dsf"
              collection_id: 3
      responses:
        200:
          description: "OK"
        400:
          description: "Missed required arguments"
        403:
          description: "Not have enough permissions"
        409:
          description: "Collection already private"

  /permissions/getPublicCollection:
    post:
      tags:
        - "Permissions"
      summary: "Get public collection from list of collection"
      description: ""
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "integer"
                format: "int64"
                description: "Collections ID"
            example:
              - 3
              - 6
              - 9
              - 15
              - 69
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int64"
                  description: "Public collections ID"
              example:
                - 9
                - 15
        400:
          description: "Bad request"

  /permissions/getPublicCollection/all:
    get:
      tags:
        - "Permissions"
      summary: "Get public collection from list of collection"
      description: ""
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "integer"
                  format: "int64"
                  description: "Public collections ID"
              example:
                  - 1
                  - 2
                  - 3
                  - 8
        404:
          description: "Not OK"
  
  /permissions/sync/ifPostDelete:
    post:
      tags:
        - "Permissions"
      summary: "Sync db if post was deleted"
      description: "If post owner delete post -> clean up db"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                post_id:
                  type: "integer"
            example:
              token: "3fd43fre324543dsf4353dsf"
              post_id: 3
      responses:
        200:
          description: "OK"
        403:
          description: 'Not have enough permissions'
        404:
          description: "Incorrect token/post_id"
          
  /permissions/sync/ifCollectionDelete:
    post:
      tags:
        - "Permissions"
      summary: "Sync db if collection was deleted"
      description: "If admin delete collection -> clean up db"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                token:
                  type: "string"
                collection_id:
                  type: "integer"
            example:
              token: "3fd43fre324543dsf4353dsf"
              collection_id: 3
      responses:
        200:
          description: "OK"
        403:
          description: 'Not have enough permissions'
        404:
          description: "Incorrect token/collection_id"