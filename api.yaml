openapi: 3.0.2
info:
  title: "Swagger Auth, validate and user permission"
  version: 1.0.0
paths:
  /auth:
    post:
      tags: 
        - "Auth and Valid"
      summary: "Authentication"
      description: "Create token and get it"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                login:
                  type: "string"
                password:
                  type: "string"
            example:
              login: "a1pha1337@gmail.com"
              password: "rhokef3"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example: "f57ebe597a3741b688269209fa29b053"
        401:
          description: "Incorrect login/pass"
          content: {}
          
  /validate/{token}:
    get:
      tags: 
        - "Auth and Valid"
      summary: "Validation"
      description: "Send token and check it"
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Non-existing token"
  /register:
    post:
      tags:
        - "User Info"
      summary: "Register user"
      description: "Register user and get session token"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                login:
                  type: "string"
                password:
                  type: "string"
            example:
              login: "a1pha1337@gmail.com"
              password: "rhokef3"
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "string"
              example: "f57ebe597a3741b688269209fa29b053"
        400:
          description: "Incorrect login/pass"
          content: {}
  /deleteUser/{token}:
    delete:
      tags:
        - "User Info"
      summary: "Delete user himself"
      description: ""
      parameters:
      - name: "token"
        in: "path"
        description: "User token"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        404:
          description: "Non-existing token"
  /deleteUserTarget:
    delete:
      tags:
        - "User Info"
      summary: "Delete target user"
      description: "Send your token and user ID of user you want to delete"
      parameters:
      - name: "token"
        in: "query"
        description: "User token"
        required: true
        schema:
          type: "string"
      - name: "userID"
        in: "query"
        description: "ID of user you want to delete"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Non-existing user ID"
        404:
          description: "Non-existing token"

  /GetUserInfo/{token}:
    get:
      tags: 
      - "User Info"
      summary: "Get user info"
      description: ""
      parameters: 
      - name: "token"
        in: "path"
        description: "User token"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  UserID:
                    type: "integer"
                    format: "int64"
                  Login:
                    type: "string"
                  Name:
                    type: "string"
              example:
                UserID: "0"
                Login: "alpha13371@mail.ru"
                Name: "Solo_228"
        404:
          description: "Non-existing token"
          
  /GetUserPublicInfo/{login}:
    get:
      tags: 
      - "User Info"
      summary: "Get user public info"
      description: ""
      parameters: 
      - name: "login"
        in: "path"
        description: "User login"
        schema:
          type: "string"
        required: true
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  UserID:
                    type: "integer"
                    format: "int64"
                  Login:
                    type: "string"
                  Name:
                    type: "string"
              example:
                UserID: "0"
                Login: "alpha13371@mail.ru"
                Name: "Solo_228"
        404:
          description: "Non-existing token"
  /EditUserPermissons:
    put:
      tags:
      - "Permissons"
      summary: "Edit permissons of user"
      description: "Send your token and user ID of user you want to edit permissions"
      parameters:
      - name: "token"
        in: "query"
        description: "User token"
        required: true
        schema:
          type: "string"
      - name: "userID"
        in: "query"
        description: "ID of user you want to edit permissions"
        required: true
        schema:
          type: "string"
      responses:
        200:
          description: "OK"
        400:
          description: "Non-existing user ID"
        404:
          description: "Non-existing token"
